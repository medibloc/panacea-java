// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/upgrade/v1beta1/upgrade.proto

package cosmos.upgrade.v1beta1;

public interface PlanOrBuilder extends
    // @@protoc_insertion_point(interface_extends:cosmos.upgrade.v1beta1.Plan)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Sets the name for the upgrade. This name will be used by the upgraded
   * version of the software to apply any special "on-upgrade" commands during
   * the first BeginBlock method after the upgrade is applied. It is also used
   * to detect whether a software version can handle a given upgrade. If no
   * upgrade handler with this name has been set in the software, it will be
   * assumed that the software is out-of-date when the upgrade Time or Height is
   * reached and the software will exit.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  java.lang.String getName();
  /**
   * <pre>
   * Sets the name for the upgrade. This name will be used by the upgraded
   * version of the software to apply any special "on-upgrade" commands during
   * the first BeginBlock method after the upgrade is applied. It is also used
   * to detect whether a software version can handle a given upgrade. If no
   * upgrade handler with this name has been set in the software, it will be
   * assumed that the software is out-of-date when the upgrade Time or Height is
   * reached and the software will exit.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * The time after which the upgrade must be performed.
   * Leave set to its zero value to use a pre-defined Height instead.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp time = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];</code>
   */
  boolean hasTime();
  /**
   * <pre>
   * The time after which the upgrade must be performed.
   * Leave set to its zero value to use a pre-defined Height instead.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp time = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];</code>
   */
  com.google.protobuf.Timestamp getTime();
  /**
   * <pre>
   * The time after which the upgrade must be performed.
   * Leave set to its zero value to use a pre-defined Height instead.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp time = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];</code>
   */
  com.google.protobuf.TimestampOrBuilder getTimeOrBuilder();

  /**
   * <pre>
   * The height at which the upgrade must be performed.
   * Only used if Time is not set.
   * </pre>
   *
   * <code>int64 height = 3;</code>
   */
  long getHeight();

  /**
   * <pre>
   * Any application specific upgrade info to be included on-chain
   * such as a git commit that validators could automatically upgrade to
   * </pre>
   *
   * <code>string info = 4;</code>
   */
  java.lang.String getInfo();
  /**
   * <pre>
   * Any application specific upgrade info to be included on-chain
   * such as a git commit that validators could automatically upgrade to
   * </pre>
   *
   * <code>string info = 4;</code>
   */
  com.google.protobuf.ByteString
      getInfoBytes();

  /**
   * <pre>
   * IBC-enabled chains can opt-in to including the upgraded client state in its upgrade plan
   * This will make the chain commit to the correct upgraded (self) client state before the upgrade occurs,
   * so that connecting chains can verify that the new upgraded client is valid by verifying a proof on the
   * previous version of the chain.
   * This will allow IBC connections to persist smoothly across planned chain upgrades
   * </pre>
   *
   * <code>.google.protobuf.Any upgraded_client_state = 5 [(.gogoproto.moretags) = "yaml:&#92;"upgraded_client_state&#92;""];</code>
   */
  boolean hasUpgradedClientState();
  /**
   * <pre>
   * IBC-enabled chains can opt-in to including the upgraded client state in its upgrade plan
   * This will make the chain commit to the correct upgraded (self) client state before the upgrade occurs,
   * so that connecting chains can verify that the new upgraded client is valid by verifying a proof on the
   * previous version of the chain.
   * This will allow IBC connections to persist smoothly across planned chain upgrades
   * </pre>
   *
   * <code>.google.protobuf.Any upgraded_client_state = 5 [(.gogoproto.moretags) = "yaml:&#92;"upgraded_client_state&#92;""];</code>
   */
  com.google.protobuf.Any getUpgradedClientState();
  /**
   * <pre>
   * IBC-enabled chains can opt-in to including the upgraded client state in its upgrade plan
   * This will make the chain commit to the correct upgraded (self) client state before the upgrade occurs,
   * so that connecting chains can verify that the new upgraded client is valid by verifying a proof on the
   * previous version of the chain.
   * This will allow IBC connections to persist smoothly across planned chain upgrades
   * </pre>
   *
   * <code>.google.protobuf.Any upgraded_client_state = 5 [(.gogoproto.moretags) = "yaml:&#92;"upgraded_client_state&#92;""];</code>
   */
  com.google.protobuf.AnyOrBuilder getUpgradedClientStateOrBuilder();
}
