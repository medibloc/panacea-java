// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/core/commitment/v1/commitment.proto

package ibc.core.commitment.v1;

/**
 * <pre>
 * MerkleProof is a wrapper type over a chain of CommitmentProofs.
 * It demonstrates membership or non-membership for an element or set of
 * elements, verifiable in conjunction with a known commitment root. Proofs
 * should be succinct.
 * MerkleProofs are ordered from leaf-to-root
 * </pre>
 *
 * Protobuf type {@code ibc.core.commitment.v1.MerkleProof}
 */
public  final class MerkleProof extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:ibc.core.commitment.v1.MerkleProof)
    MerkleProofOrBuilder {
private static final long serialVersionUID = 0L;
  // Use MerkleProof.newBuilder() to construct.
  private MerkleProof(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private MerkleProof() {
    proofs_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private MerkleProof(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              proofs_ = new java.util.ArrayList<ics23.CommitmentProof>();
              mutable_bitField0_ |= 0x00000001;
            }
            proofs_.add(
                input.readMessage(ics23.CommitmentProof.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        proofs_ = java.util.Collections.unmodifiableList(proofs_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return ibc.core.commitment.v1.Commitment.internal_static_ibc_core_commitment_v1_MerkleProof_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return ibc.core.commitment.v1.Commitment.internal_static_ibc_core_commitment_v1_MerkleProof_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            ibc.core.commitment.v1.MerkleProof.class, ibc.core.commitment.v1.MerkleProof.Builder.class);
  }

  public static final int PROOFS_FIELD_NUMBER = 1;
  private java.util.List<ics23.CommitmentProof> proofs_;
  /**
   * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
   */
  public java.util.List<ics23.CommitmentProof> getProofsList() {
    return proofs_;
  }
  /**
   * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
   */
  public java.util.List<? extends ics23.CommitmentProofOrBuilder> 
      getProofsOrBuilderList() {
    return proofs_;
  }
  /**
   * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
   */
  public int getProofsCount() {
    return proofs_.size();
  }
  /**
   * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
   */
  public ics23.CommitmentProof getProofs(int index) {
    return proofs_.get(index);
  }
  /**
   * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
   */
  public ics23.CommitmentProofOrBuilder getProofsOrBuilder(
      int index) {
    return proofs_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < proofs_.size(); i++) {
      output.writeMessage(1, proofs_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < proofs_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, proofs_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof ibc.core.commitment.v1.MerkleProof)) {
      return super.equals(obj);
    }
    ibc.core.commitment.v1.MerkleProof other = (ibc.core.commitment.v1.MerkleProof) obj;

    if (!getProofsList()
        .equals(other.getProofsList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getProofsCount() > 0) {
      hash = (37 * hash) + PROOFS_FIELD_NUMBER;
      hash = (53 * hash) + getProofsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static ibc.core.commitment.v1.MerkleProof parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ibc.core.commitment.v1.MerkleProof parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ibc.core.commitment.v1.MerkleProof parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ibc.core.commitment.v1.MerkleProof parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ibc.core.commitment.v1.MerkleProof parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ibc.core.commitment.v1.MerkleProof parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ibc.core.commitment.v1.MerkleProof parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ibc.core.commitment.v1.MerkleProof parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static ibc.core.commitment.v1.MerkleProof parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static ibc.core.commitment.v1.MerkleProof parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static ibc.core.commitment.v1.MerkleProof parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ibc.core.commitment.v1.MerkleProof parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ibc.core.commitment.v1.MerkleProof prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * MerkleProof is a wrapper type over a chain of CommitmentProofs.
   * It demonstrates membership or non-membership for an element or set of
   * elements, verifiable in conjunction with a known commitment root. Proofs
   * should be succinct.
   * MerkleProofs are ordered from leaf-to-root
   * </pre>
   *
   * Protobuf type {@code ibc.core.commitment.v1.MerkleProof}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:ibc.core.commitment.v1.MerkleProof)
      ibc.core.commitment.v1.MerkleProofOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ibc.core.commitment.v1.Commitment.internal_static_ibc_core_commitment_v1_MerkleProof_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ibc.core.commitment.v1.Commitment.internal_static_ibc_core_commitment_v1_MerkleProof_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ibc.core.commitment.v1.MerkleProof.class, ibc.core.commitment.v1.MerkleProof.Builder.class);
    }

    // Construct using ibc.core.commitment.v1.MerkleProof.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getProofsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (proofsBuilder_ == null) {
        proofs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        proofsBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return ibc.core.commitment.v1.Commitment.internal_static_ibc_core_commitment_v1_MerkleProof_descriptor;
    }

    @java.lang.Override
    public ibc.core.commitment.v1.MerkleProof getDefaultInstanceForType() {
      return ibc.core.commitment.v1.MerkleProof.getDefaultInstance();
    }

    @java.lang.Override
    public ibc.core.commitment.v1.MerkleProof build() {
      ibc.core.commitment.v1.MerkleProof result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public ibc.core.commitment.v1.MerkleProof buildPartial() {
      ibc.core.commitment.v1.MerkleProof result = new ibc.core.commitment.v1.MerkleProof(this);
      int from_bitField0_ = bitField0_;
      if (proofsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          proofs_ = java.util.Collections.unmodifiableList(proofs_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.proofs_ = proofs_;
      } else {
        result.proofs_ = proofsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof ibc.core.commitment.v1.MerkleProof) {
        return mergeFrom((ibc.core.commitment.v1.MerkleProof)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(ibc.core.commitment.v1.MerkleProof other) {
      if (other == ibc.core.commitment.v1.MerkleProof.getDefaultInstance()) return this;
      if (proofsBuilder_ == null) {
        if (!other.proofs_.isEmpty()) {
          if (proofs_.isEmpty()) {
            proofs_ = other.proofs_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureProofsIsMutable();
            proofs_.addAll(other.proofs_);
          }
          onChanged();
        }
      } else {
        if (!other.proofs_.isEmpty()) {
          if (proofsBuilder_.isEmpty()) {
            proofsBuilder_.dispose();
            proofsBuilder_ = null;
            proofs_ = other.proofs_;
            bitField0_ = (bitField0_ & ~0x00000001);
            proofsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getProofsFieldBuilder() : null;
          } else {
            proofsBuilder_.addAllMessages(other.proofs_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      ibc.core.commitment.v1.MerkleProof parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (ibc.core.commitment.v1.MerkleProof) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<ics23.CommitmentProof> proofs_ =
      java.util.Collections.emptyList();
    private void ensureProofsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        proofs_ = new java.util.ArrayList<ics23.CommitmentProof>(proofs_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        ics23.CommitmentProof, ics23.CommitmentProof.Builder, ics23.CommitmentProofOrBuilder> proofsBuilder_;

    /**
     * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
     */
    public java.util.List<ics23.CommitmentProof> getProofsList() {
      if (proofsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(proofs_);
      } else {
        return proofsBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
     */
    public int getProofsCount() {
      if (proofsBuilder_ == null) {
        return proofs_.size();
      } else {
        return proofsBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
     */
    public ics23.CommitmentProof getProofs(int index) {
      if (proofsBuilder_ == null) {
        return proofs_.get(index);
      } else {
        return proofsBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
     */
    public Builder setProofs(
        int index, ics23.CommitmentProof value) {
      if (proofsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProofsIsMutable();
        proofs_.set(index, value);
        onChanged();
      } else {
        proofsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
     */
    public Builder setProofs(
        int index, ics23.CommitmentProof.Builder builderForValue) {
      if (proofsBuilder_ == null) {
        ensureProofsIsMutable();
        proofs_.set(index, builderForValue.build());
        onChanged();
      } else {
        proofsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
     */
    public Builder addProofs(ics23.CommitmentProof value) {
      if (proofsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProofsIsMutable();
        proofs_.add(value);
        onChanged();
      } else {
        proofsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
     */
    public Builder addProofs(
        int index, ics23.CommitmentProof value) {
      if (proofsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureProofsIsMutable();
        proofs_.add(index, value);
        onChanged();
      } else {
        proofsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
     */
    public Builder addProofs(
        ics23.CommitmentProof.Builder builderForValue) {
      if (proofsBuilder_ == null) {
        ensureProofsIsMutable();
        proofs_.add(builderForValue.build());
        onChanged();
      } else {
        proofsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
     */
    public Builder addProofs(
        int index, ics23.CommitmentProof.Builder builderForValue) {
      if (proofsBuilder_ == null) {
        ensureProofsIsMutable();
        proofs_.add(index, builderForValue.build());
        onChanged();
      } else {
        proofsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
     */
    public Builder addAllProofs(
        java.lang.Iterable<? extends ics23.CommitmentProof> values) {
      if (proofsBuilder_ == null) {
        ensureProofsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, proofs_);
        onChanged();
      } else {
        proofsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
     */
    public Builder clearProofs() {
      if (proofsBuilder_ == null) {
        proofs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        proofsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
     */
    public Builder removeProofs(int index) {
      if (proofsBuilder_ == null) {
        ensureProofsIsMutable();
        proofs_.remove(index);
        onChanged();
      } else {
        proofsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
     */
    public ics23.CommitmentProof.Builder getProofsBuilder(
        int index) {
      return getProofsFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
     */
    public ics23.CommitmentProofOrBuilder getProofsOrBuilder(
        int index) {
      if (proofsBuilder_ == null) {
        return proofs_.get(index);  } else {
        return proofsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
     */
    public java.util.List<? extends ics23.CommitmentProofOrBuilder> 
         getProofsOrBuilderList() {
      if (proofsBuilder_ != null) {
        return proofsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(proofs_);
      }
    }
    /**
     * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
     */
    public ics23.CommitmentProof.Builder addProofsBuilder() {
      return getProofsFieldBuilder().addBuilder(
          ics23.CommitmentProof.getDefaultInstance());
    }
    /**
     * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
     */
    public ics23.CommitmentProof.Builder addProofsBuilder(
        int index) {
      return getProofsFieldBuilder().addBuilder(
          index, ics23.CommitmentProof.getDefaultInstance());
    }
    /**
     * <code>repeated .ics23.CommitmentProof proofs = 1;</code>
     */
    public java.util.List<ics23.CommitmentProof.Builder> 
         getProofsBuilderList() {
      return getProofsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        ics23.CommitmentProof, ics23.CommitmentProof.Builder, ics23.CommitmentProofOrBuilder> 
        getProofsFieldBuilder() {
      if (proofsBuilder_ == null) {
        proofsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            ics23.CommitmentProof, ics23.CommitmentProof.Builder, ics23.CommitmentProofOrBuilder>(
                proofs_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        proofs_ = null;
      }
      return proofsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:ibc.core.commitment.v1.MerkleProof)
  }

  // @@protoc_insertion_point(class_scope:ibc.core.commitment.v1.MerkleProof)
  private static final ibc.core.commitment.v1.MerkleProof DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ibc.core.commitment.v1.MerkleProof();
  }

  public static ibc.core.commitment.v1.MerkleProof getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<MerkleProof>
      PARSER = new com.google.protobuf.AbstractParser<MerkleProof>() {
    @java.lang.Override
    public MerkleProof parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new MerkleProof(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<MerkleProof> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<MerkleProof> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public ibc.core.commitment.v1.MerkleProof getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

