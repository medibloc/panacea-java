// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/lightclients/tendermint/v1/tendermint.proto

package ibc.lightclients.tendermint.v1;

public interface ClientStateOrBuilder extends
    // @@protoc_insertion_point(interface_extends:ibc.lightclients.tendermint.v1.ClientState)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string chain_id = 1;</code>
   */
  java.lang.String getChainId();
  /**
   * <code>string chain_id = 1;</code>
   */
  com.google.protobuf.ByteString
      getChainIdBytes();

  /**
   * <code>.ibc.lightclients.tendermint.v1.Fraction trust_level = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"trust_level&#92;""];</code>
   */
  boolean hasTrustLevel();
  /**
   * <code>.ibc.lightclients.tendermint.v1.Fraction trust_level = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"trust_level&#92;""];</code>
   */
  ibc.lightclients.tendermint.v1.Fraction getTrustLevel();
  /**
   * <code>.ibc.lightclients.tendermint.v1.Fraction trust_level = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"trust_level&#92;""];</code>
   */
  ibc.lightclients.tendermint.v1.FractionOrBuilder getTrustLevelOrBuilder();

  /**
   * <pre>
   * duration of the period since the LastestTimestamp during which the
   * submitted headers are valid for upgrade
   * </pre>
   *
   * <code>.google.protobuf.Duration trusting_period = 3 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"trusting_period&#92;"", (.gogoproto.stdduration) = true];</code>
   */
  boolean hasTrustingPeriod();
  /**
   * <pre>
   * duration of the period since the LastestTimestamp during which the
   * submitted headers are valid for upgrade
   * </pre>
   *
   * <code>.google.protobuf.Duration trusting_period = 3 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"trusting_period&#92;"", (.gogoproto.stdduration) = true];</code>
   */
  com.google.protobuf.Duration getTrustingPeriod();
  /**
   * <pre>
   * duration of the period since the LastestTimestamp during which the
   * submitted headers are valid for upgrade
   * </pre>
   *
   * <code>.google.protobuf.Duration trusting_period = 3 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"trusting_period&#92;"", (.gogoproto.stdduration) = true];</code>
   */
  com.google.protobuf.DurationOrBuilder getTrustingPeriodOrBuilder();

  /**
   * <pre>
   * duration of the staking unbonding period
   * </pre>
   *
   * <code>.google.protobuf.Duration unbonding_period = 4 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"unbonding_period&#92;"", (.gogoproto.stdduration) = true];</code>
   */
  boolean hasUnbondingPeriod();
  /**
   * <pre>
   * duration of the staking unbonding period
   * </pre>
   *
   * <code>.google.protobuf.Duration unbonding_period = 4 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"unbonding_period&#92;"", (.gogoproto.stdduration) = true];</code>
   */
  com.google.protobuf.Duration getUnbondingPeriod();
  /**
   * <pre>
   * duration of the staking unbonding period
   * </pre>
   *
   * <code>.google.protobuf.Duration unbonding_period = 4 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"unbonding_period&#92;"", (.gogoproto.stdduration) = true];</code>
   */
  com.google.protobuf.DurationOrBuilder getUnbondingPeriodOrBuilder();

  /**
   * <pre>
   * defines how much new (untrusted) header's Time can drift into the future.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_clock_drift = 5 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"max_clock_drift&#92;"", (.gogoproto.stdduration) = true];</code>
   */
  boolean hasMaxClockDrift();
  /**
   * <pre>
   * defines how much new (untrusted) header's Time can drift into the future.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_clock_drift = 5 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"max_clock_drift&#92;"", (.gogoproto.stdduration) = true];</code>
   */
  com.google.protobuf.Duration getMaxClockDrift();
  /**
   * <pre>
   * defines how much new (untrusted) header's Time can drift into the future.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_clock_drift = 5 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"max_clock_drift&#92;"", (.gogoproto.stdduration) = true];</code>
   */
  com.google.protobuf.DurationOrBuilder getMaxClockDriftOrBuilder();

  /**
   * <pre>
   * Block height when the client was frozen due to a misbehaviour
   * </pre>
   *
   * <code>.ibc.core.client.v1.Height frozen_height = 6 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"frozen_height&#92;""];</code>
   */
  boolean hasFrozenHeight();
  /**
   * <pre>
   * Block height when the client was frozen due to a misbehaviour
   * </pre>
   *
   * <code>.ibc.core.client.v1.Height frozen_height = 6 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"frozen_height&#92;""];</code>
   */
  ibc.core.client.v1.Height getFrozenHeight();
  /**
   * <pre>
   * Block height when the client was frozen due to a misbehaviour
   * </pre>
   *
   * <code>.ibc.core.client.v1.Height frozen_height = 6 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"frozen_height&#92;""];</code>
   */
  ibc.core.client.v1.HeightOrBuilder getFrozenHeightOrBuilder();

  /**
   * <pre>
   * Latest height the client was updated to
   * </pre>
   *
   * <code>.ibc.core.client.v1.Height latest_height = 7 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"latest_height&#92;""];</code>
   */
  boolean hasLatestHeight();
  /**
   * <pre>
   * Latest height the client was updated to
   * </pre>
   *
   * <code>.ibc.core.client.v1.Height latest_height = 7 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"latest_height&#92;""];</code>
   */
  ibc.core.client.v1.Height getLatestHeight();
  /**
   * <pre>
   * Latest height the client was updated to
   * </pre>
   *
   * <code>.ibc.core.client.v1.Height latest_height = 7 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"latest_height&#92;""];</code>
   */
  ibc.core.client.v1.HeightOrBuilder getLatestHeightOrBuilder();

  /**
   * <pre>
   * Proof specifications used in verifying counterparty state
   * </pre>
   *
   * <code>repeated .ics23.ProofSpec proof_specs = 8 [(.gogoproto.moretags) = "yaml:&#92;"proof_specs&#92;""];</code>
   */
  java.util.List<ics23.ProofSpec> 
      getProofSpecsList();
  /**
   * <pre>
   * Proof specifications used in verifying counterparty state
   * </pre>
   *
   * <code>repeated .ics23.ProofSpec proof_specs = 8 [(.gogoproto.moretags) = "yaml:&#92;"proof_specs&#92;""];</code>
   */
  ics23.ProofSpec getProofSpecs(int index);
  /**
   * <pre>
   * Proof specifications used in verifying counterparty state
   * </pre>
   *
   * <code>repeated .ics23.ProofSpec proof_specs = 8 [(.gogoproto.moretags) = "yaml:&#92;"proof_specs&#92;""];</code>
   */
  int getProofSpecsCount();
  /**
   * <pre>
   * Proof specifications used in verifying counterparty state
   * </pre>
   *
   * <code>repeated .ics23.ProofSpec proof_specs = 8 [(.gogoproto.moretags) = "yaml:&#92;"proof_specs&#92;""];</code>
   */
  java.util.List<? extends ics23.ProofSpecOrBuilder> 
      getProofSpecsOrBuilderList();
  /**
   * <pre>
   * Proof specifications used in verifying counterparty state
   * </pre>
   *
   * <code>repeated .ics23.ProofSpec proof_specs = 8 [(.gogoproto.moretags) = "yaml:&#92;"proof_specs&#92;""];</code>
   */
  ics23.ProofSpecOrBuilder getProofSpecsOrBuilder(
      int index);

  /**
   * <pre>
   * Path at which next upgraded client will be committed.
   * Each element corresponds to the key for a single CommitmentProof in the chained proof.
   * NOTE: ClientState must stored under `{upgradePath}/{upgradeHeight}/clientState`
   * ConsensusState must be stored under `{upgradepath}/{upgradeHeight}/consensusState`
   * For SDK chains using the default upgrade module, upgrade_path should be []string{"upgrade", "upgradedIBCState"}`
   * </pre>
   *
   * <code>repeated string upgrade_path = 9 [(.gogoproto.moretags) = "yaml:&#92;"upgrade_path&#92;""];</code>
   */
  java.util.List<java.lang.String>
      getUpgradePathList();
  /**
   * <pre>
   * Path at which next upgraded client will be committed.
   * Each element corresponds to the key for a single CommitmentProof in the chained proof.
   * NOTE: ClientState must stored under `{upgradePath}/{upgradeHeight}/clientState`
   * ConsensusState must be stored under `{upgradepath}/{upgradeHeight}/consensusState`
   * For SDK chains using the default upgrade module, upgrade_path should be []string{"upgrade", "upgradedIBCState"}`
   * </pre>
   *
   * <code>repeated string upgrade_path = 9 [(.gogoproto.moretags) = "yaml:&#92;"upgrade_path&#92;""];</code>
   */
  int getUpgradePathCount();
  /**
   * <pre>
   * Path at which next upgraded client will be committed.
   * Each element corresponds to the key for a single CommitmentProof in the chained proof.
   * NOTE: ClientState must stored under `{upgradePath}/{upgradeHeight}/clientState`
   * ConsensusState must be stored under `{upgradepath}/{upgradeHeight}/consensusState`
   * For SDK chains using the default upgrade module, upgrade_path should be []string{"upgrade", "upgradedIBCState"}`
   * </pre>
   *
   * <code>repeated string upgrade_path = 9 [(.gogoproto.moretags) = "yaml:&#92;"upgrade_path&#92;""];</code>
   */
  java.lang.String getUpgradePath(int index);
  /**
   * <pre>
   * Path at which next upgraded client will be committed.
   * Each element corresponds to the key for a single CommitmentProof in the chained proof.
   * NOTE: ClientState must stored under `{upgradePath}/{upgradeHeight}/clientState`
   * ConsensusState must be stored under `{upgradepath}/{upgradeHeight}/consensusState`
   * For SDK chains using the default upgrade module, upgrade_path should be []string{"upgrade", "upgradedIBCState"}`
   * </pre>
   *
   * <code>repeated string upgrade_path = 9 [(.gogoproto.moretags) = "yaml:&#92;"upgrade_path&#92;""];</code>
   */
  com.google.protobuf.ByteString
      getUpgradePathBytes(int index);

  /**
   * <pre>
   * This flag, when set to true, will allow governance to recover a client
   * which has expired
   * </pre>
   *
   * <code>bool allow_update_after_expiry = 10 [(.gogoproto.moretags) = "yaml:&#92;"allow_update_after_expiry&#92;""];</code>
   */
  boolean getAllowUpdateAfterExpiry();

  /**
   * <pre>
   * This flag, when set to true, will allow governance to unfreeze a client
   * whose chain has experienced a misbehaviour event
   * </pre>
   *
   * <code>bool allow_update_after_misbehaviour = 11 [(.gogoproto.moretags) = "yaml:&#92;"allow_update_after_misbehaviour&#92;""];</code>
   */
  boolean getAllowUpdateAfterMisbehaviour();
}
