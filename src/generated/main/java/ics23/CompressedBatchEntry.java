// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: confio/proofs.proto

package ics23;

/**
 * <pre>
 * Use BatchEntry not CommitmentProof, to avoid recursion
 * </pre>
 *
 * Protobuf type {@code ics23.CompressedBatchEntry}
 */
public  final class CompressedBatchEntry extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:ics23.CompressedBatchEntry)
    CompressedBatchEntryOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CompressedBatchEntry.newBuilder() to construct.
  private CompressedBatchEntry(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CompressedBatchEntry() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CompressedBatchEntry(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            ics23.CompressedExistenceProof.Builder subBuilder = null;
            if (proofCase_ == 1) {
              subBuilder = ((ics23.CompressedExistenceProof) proof_).toBuilder();
            }
            proof_ =
                input.readMessage(ics23.CompressedExistenceProof.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((ics23.CompressedExistenceProof) proof_);
              proof_ = subBuilder.buildPartial();
            }
            proofCase_ = 1;
            break;
          }
          case 18: {
            ics23.CompressedNonExistenceProof.Builder subBuilder = null;
            if (proofCase_ == 2) {
              subBuilder = ((ics23.CompressedNonExistenceProof) proof_).toBuilder();
            }
            proof_ =
                input.readMessage(ics23.CompressedNonExistenceProof.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((ics23.CompressedNonExistenceProof) proof_);
              proof_ = subBuilder.buildPartial();
            }
            proofCase_ = 2;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return ics23.Proofs.internal_static_ics23_CompressedBatchEntry_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return ics23.Proofs.internal_static_ics23_CompressedBatchEntry_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            ics23.CompressedBatchEntry.class, ics23.CompressedBatchEntry.Builder.class);
  }

  private int proofCase_ = 0;
  private java.lang.Object proof_;
  public enum ProofCase
      implements com.google.protobuf.Internal.EnumLite {
    EXIST(1),
    NONEXIST(2),
    PROOF_NOT_SET(0);
    private final int value;
    private ProofCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ProofCase valueOf(int value) {
      return forNumber(value);
    }

    public static ProofCase forNumber(int value) {
      switch (value) {
        case 1: return EXIST;
        case 2: return NONEXIST;
        case 0: return PROOF_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ProofCase
  getProofCase() {
    return ProofCase.forNumber(
        proofCase_);
  }

  public static final int EXIST_FIELD_NUMBER = 1;
  /**
   * <code>.ics23.CompressedExistenceProof exist = 1;</code>
   */
  public boolean hasExist() {
    return proofCase_ == 1;
  }
  /**
   * <code>.ics23.CompressedExistenceProof exist = 1;</code>
   */
  public ics23.CompressedExistenceProof getExist() {
    if (proofCase_ == 1) {
       return (ics23.CompressedExistenceProof) proof_;
    }
    return ics23.CompressedExistenceProof.getDefaultInstance();
  }
  /**
   * <code>.ics23.CompressedExistenceProof exist = 1;</code>
   */
  public ics23.CompressedExistenceProofOrBuilder getExistOrBuilder() {
    if (proofCase_ == 1) {
       return (ics23.CompressedExistenceProof) proof_;
    }
    return ics23.CompressedExistenceProof.getDefaultInstance();
  }

  public static final int NONEXIST_FIELD_NUMBER = 2;
  /**
   * <code>.ics23.CompressedNonExistenceProof nonexist = 2;</code>
   */
  public boolean hasNonexist() {
    return proofCase_ == 2;
  }
  /**
   * <code>.ics23.CompressedNonExistenceProof nonexist = 2;</code>
   */
  public ics23.CompressedNonExistenceProof getNonexist() {
    if (proofCase_ == 2) {
       return (ics23.CompressedNonExistenceProof) proof_;
    }
    return ics23.CompressedNonExistenceProof.getDefaultInstance();
  }
  /**
   * <code>.ics23.CompressedNonExistenceProof nonexist = 2;</code>
   */
  public ics23.CompressedNonExistenceProofOrBuilder getNonexistOrBuilder() {
    if (proofCase_ == 2) {
       return (ics23.CompressedNonExistenceProof) proof_;
    }
    return ics23.CompressedNonExistenceProof.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (proofCase_ == 1) {
      output.writeMessage(1, (ics23.CompressedExistenceProof) proof_);
    }
    if (proofCase_ == 2) {
      output.writeMessage(2, (ics23.CompressedNonExistenceProof) proof_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (proofCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (ics23.CompressedExistenceProof) proof_);
    }
    if (proofCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (ics23.CompressedNonExistenceProof) proof_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof ics23.CompressedBatchEntry)) {
      return super.equals(obj);
    }
    ics23.CompressedBatchEntry other = (ics23.CompressedBatchEntry) obj;

    if (!getProofCase().equals(other.getProofCase())) return false;
    switch (proofCase_) {
      case 1:
        if (!getExist()
            .equals(other.getExist())) return false;
        break;
      case 2:
        if (!getNonexist()
            .equals(other.getNonexist())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (proofCase_) {
      case 1:
        hash = (37 * hash) + EXIST_FIELD_NUMBER;
        hash = (53 * hash) + getExist().hashCode();
        break;
      case 2:
        hash = (37 * hash) + NONEXIST_FIELD_NUMBER;
        hash = (53 * hash) + getNonexist().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static ics23.CompressedBatchEntry parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ics23.CompressedBatchEntry parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ics23.CompressedBatchEntry parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ics23.CompressedBatchEntry parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ics23.CompressedBatchEntry parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ics23.CompressedBatchEntry parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ics23.CompressedBatchEntry parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ics23.CompressedBatchEntry parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static ics23.CompressedBatchEntry parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static ics23.CompressedBatchEntry parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static ics23.CompressedBatchEntry parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ics23.CompressedBatchEntry parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ics23.CompressedBatchEntry prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Use BatchEntry not CommitmentProof, to avoid recursion
   * </pre>
   *
   * Protobuf type {@code ics23.CompressedBatchEntry}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:ics23.CompressedBatchEntry)
      ics23.CompressedBatchEntryOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ics23.Proofs.internal_static_ics23_CompressedBatchEntry_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ics23.Proofs.internal_static_ics23_CompressedBatchEntry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ics23.CompressedBatchEntry.class, ics23.CompressedBatchEntry.Builder.class);
    }

    // Construct using ics23.CompressedBatchEntry.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      proofCase_ = 0;
      proof_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return ics23.Proofs.internal_static_ics23_CompressedBatchEntry_descriptor;
    }

    @java.lang.Override
    public ics23.CompressedBatchEntry getDefaultInstanceForType() {
      return ics23.CompressedBatchEntry.getDefaultInstance();
    }

    @java.lang.Override
    public ics23.CompressedBatchEntry build() {
      ics23.CompressedBatchEntry result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public ics23.CompressedBatchEntry buildPartial() {
      ics23.CompressedBatchEntry result = new ics23.CompressedBatchEntry(this);
      if (proofCase_ == 1) {
        if (existBuilder_ == null) {
          result.proof_ = proof_;
        } else {
          result.proof_ = existBuilder_.build();
        }
      }
      if (proofCase_ == 2) {
        if (nonexistBuilder_ == null) {
          result.proof_ = proof_;
        } else {
          result.proof_ = nonexistBuilder_.build();
        }
      }
      result.proofCase_ = proofCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof ics23.CompressedBatchEntry) {
        return mergeFrom((ics23.CompressedBatchEntry)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(ics23.CompressedBatchEntry other) {
      if (other == ics23.CompressedBatchEntry.getDefaultInstance()) return this;
      switch (other.getProofCase()) {
        case EXIST: {
          mergeExist(other.getExist());
          break;
        }
        case NONEXIST: {
          mergeNonexist(other.getNonexist());
          break;
        }
        case PROOF_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      ics23.CompressedBatchEntry parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (ics23.CompressedBatchEntry) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int proofCase_ = 0;
    private java.lang.Object proof_;
    public ProofCase
        getProofCase() {
      return ProofCase.forNumber(
          proofCase_);
    }

    public Builder clearProof() {
      proofCase_ = 0;
      proof_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        ics23.CompressedExistenceProof, ics23.CompressedExistenceProof.Builder, ics23.CompressedExistenceProofOrBuilder> existBuilder_;
    /**
     * <code>.ics23.CompressedExistenceProof exist = 1;</code>
     */
    public boolean hasExist() {
      return proofCase_ == 1;
    }
    /**
     * <code>.ics23.CompressedExistenceProof exist = 1;</code>
     */
    public ics23.CompressedExistenceProof getExist() {
      if (existBuilder_ == null) {
        if (proofCase_ == 1) {
          return (ics23.CompressedExistenceProof) proof_;
        }
        return ics23.CompressedExistenceProof.getDefaultInstance();
      } else {
        if (proofCase_ == 1) {
          return existBuilder_.getMessage();
        }
        return ics23.CompressedExistenceProof.getDefaultInstance();
      }
    }
    /**
     * <code>.ics23.CompressedExistenceProof exist = 1;</code>
     */
    public Builder setExist(ics23.CompressedExistenceProof value) {
      if (existBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        proof_ = value;
        onChanged();
      } else {
        existBuilder_.setMessage(value);
      }
      proofCase_ = 1;
      return this;
    }
    /**
     * <code>.ics23.CompressedExistenceProof exist = 1;</code>
     */
    public Builder setExist(
        ics23.CompressedExistenceProof.Builder builderForValue) {
      if (existBuilder_ == null) {
        proof_ = builderForValue.build();
        onChanged();
      } else {
        existBuilder_.setMessage(builderForValue.build());
      }
      proofCase_ = 1;
      return this;
    }
    /**
     * <code>.ics23.CompressedExistenceProof exist = 1;</code>
     */
    public Builder mergeExist(ics23.CompressedExistenceProof value) {
      if (existBuilder_ == null) {
        if (proofCase_ == 1 &&
            proof_ != ics23.CompressedExistenceProof.getDefaultInstance()) {
          proof_ = ics23.CompressedExistenceProof.newBuilder((ics23.CompressedExistenceProof) proof_)
              .mergeFrom(value).buildPartial();
        } else {
          proof_ = value;
        }
        onChanged();
      } else {
        if (proofCase_ == 1) {
          existBuilder_.mergeFrom(value);
        }
        existBuilder_.setMessage(value);
      }
      proofCase_ = 1;
      return this;
    }
    /**
     * <code>.ics23.CompressedExistenceProof exist = 1;</code>
     */
    public Builder clearExist() {
      if (existBuilder_ == null) {
        if (proofCase_ == 1) {
          proofCase_ = 0;
          proof_ = null;
          onChanged();
        }
      } else {
        if (proofCase_ == 1) {
          proofCase_ = 0;
          proof_ = null;
        }
        existBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.ics23.CompressedExistenceProof exist = 1;</code>
     */
    public ics23.CompressedExistenceProof.Builder getExistBuilder() {
      return getExistFieldBuilder().getBuilder();
    }
    /**
     * <code>.ics23.CompressedExistenceProof exist = 1;</code>
     */
    public ics23.CompressedExistenceProofOrBuilder getExistOrBuilder() {
      if ((proofCase_ == 1) && (existBuilder_ != null)) {
        return existBuilder_.getMessageOrBuilder();
      } else {
        if (proofCase_ == 1) {
          return (ics23.CompressedExistenceProof) proof_;
        }
        return ics23.CompressedExistenceProof.getDefaultInstance();
      }
    }
    /**
     * <code>.ics23.CompressedExistenceProof exist = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ics23.CompressedExistenceProof, ics23.CompressedExistenceProof.Builder, ics23.CompressedExistenceProofOrBuilder> 
        getExistFieldBuilder() {
      if (existBuilder_ == null) {
        if (!(proofCase_ == 1)) {
          proof_ = ics23.CompressedExistenceProof.getDefaultInstance();
        }
        existBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ics23.CompressedExistenceProof, ics23.CompressedExistenceProof.Builder, ics23.CompressedExistenceProofOrBuilder>(
                (ics23.CompressedExistenceProof) proof_,
                getParentForChildren(),
                isClean());
        proof_ = null;
      }
      proofCase_ = 1;
      onChanged();;
      return existBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        ics23.CompressedNonExistenceProof, ics23.CompressedNonExistenceProof.Builder, ics23.CompressedNonExistenceProofOrBuilder> nonexistBuilder_;
    /**
     * <code>.ics23.CompressedNonExistenceProof nonexist = 2;</code>
     */
    public boolean hasNonexist() {
      return proofCase_ == 2;
    }
    /**
     * <code>.ics23.CompressedNonExistenceProof nonexist = 2;</code>
     */
    public ics23.CompressedNonExistenceProof getNonexist() {
      if (nonexistBuilder_ == null) {
        if (proofCase_ == 2) {
          return (ics23.CompressedNonExistenceProof) proof_;
        }
        return ics23.CompressedNonExistenceProof.getDefaultInstance();
      } else {
        if (proofCase_ == 2) {
          return nonexistBuilder_.getMessage();
        }
        return ics23.CompressedNonExistenceProof.getDefaultInstance();
      }
    }
    /**
     * <code>.ics23.CompressedNonExistenceProof nonexist = 2;</code>
     */
    public Builder setNonexist(ics23.CompressedNonExistenceProof value) {
      if (nonexistBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        proof_ = value;
        onChanged();
      } else {
        nonexistBuilder_.setMessage(value);
      }
      proofCase_ = 2;
      return this;
    }
    /**
     * <code>.ics23.CompressedNonExistenceProof nonexist = 2;</code>
     */
    public Builder setNonexist(
        ics23.CompressedNonExistenceProof.Builder builderForValue) {
      if (nonexistBuilder_ == null) {
        proof_ = builderForValue.build();
        onChanged();
      } else {
        nonexistBuilder_.setMessage(builderForValue.build());
      }
      proofCase_ = 2;
      return this;
    }
    /**
     * <code>.ics23.CompressedNonExistenceProof nonexist = 2;</code>
     */
    public Builder mergeNonexist(ics23.CompressedNonExistenceProof value) {
      if (nonexistBuilder_ == null) {
        if (proofCase_ == 2 &&
            proof_ != ics23.CompressedNonExistenceProof.getDefaultInstance()) {
          proof_ = ics23.CompressedNonExistenceProof.newBuilder((ics23.CompressedNonExistenceProof) proof_)
              .mergeFrom(value).buildPartial();
        } else {
          proof_ = value;
        }
        onChanged();
      } else {
        if (proofCase_ == 2) {
          nonexistBuilder_.mergeFrom(value);
        }
        nonexistBuilder_.setMessage(value);
      }
      proofCase_ = 2;
      return this;
    }
    /**
     * <code>.ics23.CompressedNonExistenceProof nonexist = 2;</code>
     */
    public Builder clearNonexist() {
      if (nonexistBuilder_ == null) {
        if (proofCase_ == 2) {
          proofCase_ = 0;
          proof_ = null;
          onChanged();
        }
      } else {
        if (proofCase_ == 2) {
          proofCase_ = 0;
          proof_ = null;
        }
        nonexistBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.ics23.CompressedNonExistenceProof nonexist = 2;</code>
     */
    public ics23.CompressedNonExistenceProof.Builder getNonexistBuilder() {
      return getNonexistFieldBuilder().getBuilder();
    }
    /**
     * <code>.ics23.CompressedNonExistenceProof nonexist = 2;</code>
     */
    public ics23.CompressedNonExistenceProofOrBuilder getNonexistOrBuilder() {
      if ((proofCase_ == 2) && (nonexistBuilder_ != null)) {
        return nonexistBuilder_.getMessageOrBuilder();
      } else {
        if (proofCase_ == 2) {
          return (ics23.CompressedNonExistenceProof) proof_;
        }
        return ics23.CompressedNonExistenceProof.getDefaultInstance();
      }
    }
    /**
     * <code>.ics23.CompressedNonExistenceProof nonexist = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ics23.CompressedNonExistenceProof, ics23.CompressedNonExistenceProof.Builder, ics23.CompressedNonExistenceProofOrBuilder> 
        getNonexistFieldBuilder() {
      if (nonexistBuilder_ == null) {
        if (!(proofCase_ == 2)) {
          proof_ = ics23.CompressedNonExistenceProof.getDefaultInstance();
        }
        nonexistBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ics23.CompressedNonExistenceProof, ics23.CompressedNonExistenceProof.Builder, ics23.CompressedNonExistenceProofOrBuilder>(
                (ics23.CompressedNonExistenceProof) proof_,
                getParentForChildren(),
                isClean());
        proof_ = null;
      }
      proofCase_ = 2;
      onChanged();;
      return nonexistBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:ics23.CompressedBatchEntry)
  }

  // @@protoc_insertion_point(class_scope:ics23.CompressedBatchEntry)
  private static final ics23.CompressedBatchEntry DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ics23.CompressedBatchEntry();
  }

  public static ics23.CompressedBatchEntry getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CompressedBatchEntry>
      PARSER = new com.google.protobuf.AbstractParser<CompressedBatchEntry>() {
    @java.lang.Override
    public CompressedBatchEntry parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new CompressedBatchEntry(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CompressedBatchEntry> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CompressedBatchEntry> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public ics23.CompressedBatchEntry getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

