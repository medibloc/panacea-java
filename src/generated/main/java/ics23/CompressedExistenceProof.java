// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: confio/proofs.proto

package ics23;

/**
 * Protobuf type {@code ics23.CompressedExistenceProof}
 */
public  final class CompressedExistenceProof extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:ics23.CompressedExistenceProof)
    CompressedExistenceProofOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CompressedExistenceProof.newBuilder() to construct.
  private CompressedExistenceProof(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CompressedExistenceProof() {
    key_ = com.google.protobuf.ByteString.EMPTY;
    value_ = com.google.protobuf.ByteString.EMPTY;
    path_ = emptyIntList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CompressedExistenceProof(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {

            key_ = input.readBytes();
            break;
          }
          case 18: {

            value_ = input.readBytes();
            break;
          }
          case 26: {
            ics23.LeafOp.Builder subBuilder = null;
            if (leaf_ != null) {
              subBuilder = leaf_.toBuilder();
            }
            leaf_ = input.readMessage(ics23.LeafOp.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(leaf_);
              leaf_ = subBuilder.buildPartial();
            }

            break;
          }
          case 32: {
            if (!((mutable_bitField0_ & 0x00000008) != 0)) {
              path_ = newIntList();
              mutable_bitField0_ |= 0x00000008;
            }
            path_.addInt(input.readInt32());
            break;
          }
          case 34: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000008) != 0) && input.getBytesUntilLimit() > 0) {
              path_ = newIntList();
              mutable_bitField0_ |= 0x00000008;
            }
            while (input.getBytesUntilLimit() > 0) {
              path_.addInt(input.readInt32());
            }
            input.popLimit(limit);
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000008) != 0)) {
        path_.makeImmutable(); // C
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return ics23.Proofs.internal_static_ics23_CompressedExistenceProof_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return ics23.Proofs.internal_static_ics23_CompressedExistenceProof_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            ics23.CompressedExistenceProof.class, ics23.CompressedExistenceProof.Builder.class);
  }

  private int bitField0_;
  public static final int KEY_FIELD_NUMBER = 1;
  private com.google.protobuf.ByteString key_;
  /**
   * <code>bytes key = 1;</code>
   */
  public com.google.protobuf.ByteString getKey() {
    return key_;
  }

  public static final int VALUE_FIELD_NUMBER = 2;
  private com.google.protobuf.ByteString value_;
  /**
   * <code>bytes value = 2;</code>
   */
  public com.google.protobuf.ByteString getValue() {
    return value_;
  }

  public static final int LEAF_FIELD_NUMBER = 3;
  private ics23.LeafOp leaf_;
  /**
   * <code>.ics23.LeafOp leaf = 3;</code>
   */
  public boolean hasLeaf() {
    return leaf_ != null;
  }
  /**
   * <code>.ics23.LeafOp leaf = 3;</code>
   */
  public ics23.LeafOp getLeaf() {
    return leaf_ == null ? ics23.LeafOp.getDefaultInstance() : leaf_;
  }
  /**
   * <code>.ics23.LeafOp leaf = 3;</code>
   */
  public ics23.LeafOpOrBuilder getLeafOrBuilder() {
    return getLeaf();
  }

  public static final int PATH_FIELD_NUMBER = 4;
  private com.google.protobuf.Internal.IntList path_;
  /**
   * <pre>
   * these are indexes into the lookup_inners table in CompressedBatchProof
   * </pre>
   *
   * <code>repeated int32 path = 4;</code>
   */
  public java.util.List<java.lang.Integer>
      getPathList() {
    return path_;
  }
  /**
   * <pre>
   * these are indexes into the lookup_inners table in CompressedBatchProof
   * </pre>
   *
   * <code>repeated int32 path = 4;</code>
   */
  public int getPathCount() {
    return path_.size();
  }
  /**
   * <pre>
   * these are indexes into the lookup_inners table in CompressedBatchProof
   * </pre>
   *
   * <code>repeated int32 path = 4;</code>
   */
  public int getPath(int index) {
    return path_.getInt(index);
  }
  private int pathMemoizedSerializedSize = -1;

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (!key_.isEmpty()) {
      output.writeBytes(1, key_);
    }
    if (!value_.isEmpty()) {
      output.writeBytes(2, value_);
    }
    if (leaf_ != null) {
      output.writeMessage(3, getLeaf());
    }
    if (getPathList().size() > 0) {
      output.writeUInt32NoTag(34);
      output.writeUInt32NoTag(pathMemoizedSerializedSize);
    }
    for (int i = 0; i < path_.size(); i++) {
      output.writeInt32NoTag(path_.getInt(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!key_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(1, key_);
    }
    if (!value_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(2, value_);
    }
    if (leaf_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getLeaf());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < path_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(path_.getInt(i));
      }
      size += dataSize;
      if (!getPathList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      pathMemoizedSerializedSize = dataSize;
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof ics23.CompressedExistenceProof)) {
      return super.equals(obj);
    }
    ics23.CompressedExistenceProof other = (ics23.CompressedExistenceProof) obj;

    if (!getKey()
        .equals(other.getKey())) return false;
    if (!getValue()
        .equals(other.getValue())) return false;
    if (hasLeaf() != other.hasLeaf()) return false;
    if (hasLeaf()) {
      if (!getLeaf()
          .equals(other.getLeaf())) return false;
    }
    if (!getPathList()
        .equals(other.getPathList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + KEY_FIELD_NUMBER;
    hash = (53 * hash) + getKey().hashCode();
    hash = (37 * hash) + VALUE_FIELD_NUMBER;
    hash = (53 * hash) + getValue().hashCode();
    if (hasLeaf()) {
      hash = (37 * hash) + LEAF_FIELD_NUMBER;
      hash = (53 * hash) + getLeaf().hashCode();
    }
    if (getPathCount() > 0) {
      hash = (37 * hash) + PATH_FIELD_NUMBER;
      hash = (53 * hash) + getPathList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static ics23.CompressedExistenceProof parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ics23.CompressedExistenceProof parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ics23.CompressedExistenceProof parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ics23.CompressedExistenceProof parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ics23.CompressedExistenceProof parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ics23.CompressedExistenceProof parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ics23.CompressedExistenceProof parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ics23.CompressedExistenceProof parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static ics23.CompressedExistenceProof parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static ics23.CompressedExistenceProof parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static ics23.CompressedExistenceProof parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ics23.CompressedExistenceProof parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ics23.CompressedExistenceProof prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code ics23.CompressedExistenceProof}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:ics23.CompressedExistenceProof)
      ics23.CompressedExistenceProofOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ics23.Proofs.internal_static_ics23_CompressedExistenceProof_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ics23.Proofs.internal_static_ics23_CompressedExistenceProof_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ics23.CompressedExistenceProof.class, ics23.CompressedExistenceProof.Builder.class);
    }

    // Construct using ics23.CompressedExistenceProof.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      key_ = com.google.protobuf.ByteString.EMPTY;

      value_ = com.google.protobuf.ByteString.EMPTY;

      if (leafBuilder_ == null) {
        leaf_ = null;
      } else {
        leaf_ = null;
        leafBuilder_ = null;
      }
      path_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return ics23.Proofs.internal_static_ics23_CompressedExistenceProof_descriptor;
    }

    @java.lang.Override
    public ics23.CompressedExistenceProof getDefaultInstanceForType() {
      return ics23.CompressedExistenceProof.getDefaultInstance();
    }

    @java.lang.Override
    public ics23.CompressedExistenceProof build() {
      ics23.CompressedExistenceProof result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public ics23.CompressedExistenceProof buildPartial() {
      ics23.CompressedExistenceProof result = new ics23.CompressedExistenceProof(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.key_ = key_;
      result.value_ = value_;
      if (leafBuilder_ == null) {
        result.leaf_ = leaf_;
      } else {
        result.leaf_ = leafBuilder_.build();
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        path_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000008);
      }
      result.path_ = path_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof ics23.CompressedExistenceProof) {
        return mergeFrom((ics23.CompressedExistenceProof)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(ics23.CompressedExistenceProof other) {
      if (other == ics23.CompressedExistenceProof.getDefaultInstance()) return this;
      if (other.getKey() != com.google.protobuf.ByteString.EMPTY) {
        setKey(other.getKey());
      }
      if (other.getValue() != com.google.protobuf.ByteString.EMPTY) {
        setValue(other.getValue());
      }
      if (other.hasLeaf()) {
        mergeLeaf(other.getLeaf());
      }
      if (!other.path_.isEmpty()) {
        if (path_.isEmpty()) {
          path_ = other.path_;
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          ensurePathIsMutable();
          path_.addAll(other.path_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      ics23.CompressedExistenceProof parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (ics23.CompressedExistenceProof) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.ByteString key_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes key = 1;</code>
     */
    public com.google.protobuf.ByteString getKey() {
      return key_;
    }
    /**
     * <code>bytes key = 1;</code>
     */
    public Builder setKey(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      key_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bytes key = 1;</code>
     */
    public Builder clearKey() {
      
      key_ = getDefaultInstance().getKey();
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString value_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes value = 2;</code>
     */
    public com.google.protobuf.ByteString getValue() {
      return value_;
    }
    /**
     * <code>bytes value = 2;</code>
     */
    public Builder setValue(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      value_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bytes value = 2;</code>
     */
    public Builder clearValue() {
      
      value_ = getDefaultInstance().getValue();
      onChanged();
      return this;
    }

    private ics23.LeafOp leaf_;
    private com.google.protobuf.SingleFieldBuilderV3<
        ics23.LeafOp, ics23.LeafOp.Builder, ics23.LeafOpOrBuilder> leafBuilder_;
    /**
     * <code>.ics23.LeafOp leaf = 3;</code>
     */
    public boolean hasLeaf() {
      return leafBuilder_ != null || leaf_ != null;
    }
    /**
     * <code>.ics23.LeafOp leaf = 3;</code>
     */
    public ics23.LeafOp getLeaf() {
      if (leafBuilder_ == null) {
        return leaf_ == null ? ics23.LeafOp.getDefaultInstance() : leaf_;
      } else {
        return leafBuilder_.getMessage();
      }
    }
    /**
     * <code>.ics23.LeafOp leaf = 3;</code>
     */
    public Builder setLeaf(ics23.LeafOp value) {
      if (leafBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        leaf_ = value;
        onChanged();
      } else {
        leafBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.ics23.LeafOp leaf = 3;</code>
     */
    public Builder setLeaf(
        ics23.LeafOp.Builder builderForValue) {
      if (leafBuilder_ == null) {
        leaf_ = builderForValue.build();
        onChanged();
      } else {
        leafBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.ics23.LeafOp leaf = 3;</code>
     */
    public Builder mergeLeaf(ics23.LeafOp value) {
      if (leafBuilder_ == null) {
        if (leaf_ != null) {
          leaf_ =
            ics23.LeafOp.newBuilder(leaf_).mergeFrom(value).buildPartial();
        } else {
          leaf_ = value;
        }
        onChanged();
      } else {
        leafBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.ics23.LeafOp leaf = 3;</code>
     */
    public Builder clearLeaf() {
      if (leafBuilder_ == null) {
        leaf_ = null;
        onChanged();
      } else {
        leaf_ = null;
        leafBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.ics23.LeafOp leaf = 3;</code>
     */
    public ics23.LeafOp.Builder getLeafBuilder() {
      
      onChanged();
      return getLeafFieldBuilder().getBuilder();
    }
    /**
     * <code>.ics23.LeafOp leaf = 3;</code>
     */
    public ics23.LeafOpOrBuilder getLeafOrBuilder() {
      if (leafBuilder_ != null) {
        return leafBuilder_.getMessageOrBuilder();
      } else {
        return leaf_ == null ?
            ics23.LeafOp.getDefaultInstance() : leaf_;
      }
    }
    /**
     * <code>.ics23.LeafOp leaf = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ics23.LeafOp, ics23.LeafOp.Builder, ics23.LeafOpOrBuilder> 
        getLeafFieldBuilder() {
      if (leafBuilder_ == null) {
        leafBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ics23.LeafOp, ics23.LeafOp.Builder, ics23.LeafOpOrBuilder>(
                getLeaf(),
                getParentForChildren(),
                isClean());
        leaf_ = null;
      }
      return leafBuilder_;
    }

    private com.google.protobuf.Internal.IntList path_ = emptyIntList();
    private void ensurePathIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        path_ = mutableCopy(path_);
        bitField0_ |= 0x00000008;
       }
    }
    /**
     * <pre>
     * these are indexes into the lookup_inners table in CompressedBatchProof
     * </pre>
     *
     * <code>repeated int32 path = 4;</code>
     */
    public java.util.List<java.lang.Integer>
        getPathList() {
      return ((bitField0_ & 0x00000008) != 0) ?
               java.util.Collections.unmodifiableList(path_) : path_;
    }
    /**
     * <pre>
     * these are indexes into the lookup_inners table in CompressedBatchProof
     * </pre>
     *
     * <code>repeated int32 path = 4;</code>
     */
    public int getPathCount() {
      return path_.size();
    }
    /**
     * <pre>
     * these are indexes into the lookup_inners table in CompressedBatchProof
     * </pre>
     *
     * <code>repeated int32 path = 4;</code>
     */
    public int getPath(int index) {
      return path_.getInt(index);
    }
    /**
     * <pre>
     * these are indexes into the lookup_inners table in CompressedBatchProof
     * </pre>
     *
     * <code>repeated int32 path = 4;</code>
     */
    public Builder setPath(
        int index, int value) {
      ensurePathIsMutable();
      path_.setInt(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * these are indexes into the lookup_inners table in CompressedBatchProof
     * </pre>
     *
     * <code>repeated int32 path = 4;</code>
     */
    public Builder addPath(int value) {
      ensurePathIsMutable();
      path_.addInt(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * these are indexes into the lookup_inners table in CompressedBatchProof
     * </pre>
     *
     * <code>repeated int32 path = 4;</code>
     */
    public Builder addAllPath(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensurePathIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, path_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * these are indexes into the lookup_inners table in CompressedBatchProof
     * </pre>
     *
     * <code>repeated int32 path = 4;</code>
     */
    public Builder clearPath() {
      path_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:ics23.CompressedExistenceProof)
  }

  // @@protoc_insertion_point(class_scope:ics23.CompressedExistenceProof)
  private static final ics23.CompressedExistenceProof DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ics23.CompressedExistenceProof();
  }

  public static ics23.CompressedExistenceProof getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CompressedExistenceProof>
      PARSER = new com.google.protobuf.AbstractParser<CompressedExistenceProof>() {
    @java.lang.Override
    public CompressedExistenceProof parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new CompressedExistenceProof(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CompressedExistenceProof> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CompressedExistenceProof> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public ics23.CompressedExistenceProof getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

