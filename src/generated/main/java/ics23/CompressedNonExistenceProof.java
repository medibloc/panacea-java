// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: confio/proofs.proto

package ics23;

/**
 * Protobuf type {@code ics23.CompressedNonExistenceProof}
 */
public  final class CompressedNonExistenceProof extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:ics23.CompressedNonExistenceProof)
    CompressedNonExistenceProofOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CompressedNonExistenceProof.newBuilder() to construct.
  private CompressedNonExistenceProof(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CompressedNonExistenceProof() {
    key_ = com.google.protobuf.ByteString.EMPTY;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CompressedNonExistenceProof(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {

            key_ = input.readBytes();
            break;
          }
          case 18: {
            ics23.CompressedExistenceProof.Builder subBuilder = null;
            if (left_ != null) {
              subBuilder = left_.toBuilder();
            }
            left_ = input.readMessage(ics23.CompressedExistenceProof.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(left_);
              left_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            ics23.CompressedExistenceProof.Builder subBuilder = null;
            if (right_ != null) {
              subBuilder = right_.toBuilder();
            }
            right_ = input.readMessage(ics23.CompressedExistenceProof.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(right_);
              right_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return ics23.Proofs.internal_static_ics23_CompressedNonExistenceProof_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return ics23.Proofs.internal_static_ics23_CompressedNonExistenceProof_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            ics23.CompressedNonExistenceProof.class, ics23.CompressedNonExistenceProof.Builder.class);
  }

  public static final int KEY_FIELD_NUMBER = 1;
  private com.google.protobuf.ByteString key_;
  /**
   * <pre>
   * TODO: remove this as unnecessary??? we prove a range
   * </pre>
   *
   * <code>bytes key = 1;</code>
   */
  public com.google.protobuf.ByteString getKey() {
    return key_;
  }

  public static final int LEFT_FIELD_NUMBER = 2;
  private ics23.CompressedExistenceProof left_;
  /**
   * <code>.ics23.CompressedExistenceProof left = 2;</code>
   */
  public boolean hasLeft() {
    return left_ != null;
  }
  /**
   * <code>.ics23.CompressedExistenceProof left = 2;</code>
   */
  public ics23.CompressedExistenceProof getLeft() {
    return left_ == null ? ics23.CompressedExistenceProof.getDefaultInstance() : left_;
  }
  /**
   * <code>.ics23.CompressedExistenceProof left = 2;</code>
   */
  public ics23.CompressedExistenceProofOrBuilder getLeftOrBuilder() {
    return getLeft();
  }

  public static final int RIGHT_FIELD_NUMBER = 3;
  private ics23.CompressedExistenceProof right_;
  /**
   * <code>.ics23.CompressedExistenceProof right = 3;</code>
   */
  public boolean hasRight() {
    return right_ != null;
  }
  /**
   * <code>.ics23.CompressedExistenceProof right = 3;</code>
   */
  public ics23.CompressedExistenceProof getRight() {
    return right_ == null ? ics23.CompressedExistenceProof.getDefaultInstance() : right_;
  }
  /**
   * <code>.ics23.CompressedExistenceProof right = 3;</code>
   */
  public ics23.CompressedExistenceProofOrBuilder getRightOrBuilder() {
    return getRight();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!key_.isEmpty()) {
      output.writeBytes(1, key_);
    }
    if (left_ != null) {
      output.writeMessage(2, getLeft());
    }
    if (right_ != null) {
      output.writeMessage(3, getRight());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!key_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(1, key_);
    }
    if (left_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getLeft());
    }
    if (right_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getRight());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof ics23.CompressedNonExistenceProof)) {
      return super.equals(obj);
    }
    ics23.CompressedNonExistenceProof other = (ics23.CompressedNonExistenceProof) obj;

    if (!getKey()
        .equals(other.getKey())) return false;
    if (hasLeft() != other.hasLeft()) return false;
    if (hasLeft()) {
      if (!getLeft()
          .equals(other.getLeft())) return false;
    }
    if (hasRight() != other.hasRight()) return false;
    if (hasRight()) {
      if (!getRight()
          .equals(other.getRight())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + KEY_FIELD_NUMBER;
    hash = (53 * hash) + getKey().hashCode();
    if (hasLeft()) {
      hash = (37 * hash) + LEFT_FIELD_NUMBER;
      hash = (53 * hash) + getLeft().hashCode();
    }
    if (hasRight()) {
      hash = (37 * hash) + RIGHT_FIELD_NUMBER;
      hash = (53 * hash) + getRight().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static ics23.CompressedNonExistenceProof parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ics23.CompressedNonExistenceProof parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ics23.CompressedNonExistenceProof parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ics23.CompressedNonExistenceProof parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ics23.CompressedNonExistenceProof parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ics23.CompressedNonExistenceProof parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ics23.CompressedNonExistenceProof parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ics23.CompressedNonExistenceProof parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static ics23.CompressedNonExistenceProof parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static ics23.CompressedNonExistenceProof parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static ics23.CompressedNonExistenceProof parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ics23.CompressedNonExistenceProof parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ics23.CompressedNonExistenceProof prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code ics23.CompressedNonExistenceProof}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:ics23.CompressedNonExistenceProof)
      ics23.CompressedNonExistenceProofOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ics23.Proofs.internal_static_ics23_CompressedNonExistenceProof_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ics23.Proofs.internal_static_ics23_CompressedNonExistenceProof_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ics23.CompressedNonExistenceProof.class, ics23.CompressedNonExistenceProof.Builder.class);
    }

    // Construct using ics23.CompressedNonExistenceProof.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      key_ = com.google.protobuf.ByteString.EMPTY;

      if (leftBuilder_ == null) {
        left_ = null;
      } else {
        left_ = null;
        leftBuilder_ = null;
      }
      if (rightBuilder_ == null) {
        right_ = null;
      } else {
        right_ = null;
        rightBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return ics23.Proofs.internal_static_ics23_CompressedNonExistenceProof_descriptor;
    }

    @java.lang.Override
    public ics23.CompressedNonExistenceProof getDefaultInstanceForType() {
      return ics23.CompressedNonExistenceProof.getDefaultInstance();
    }

    @java.lang.Override
    public ics23.CompressedNonExistenceProof build() {
      ics23.CompressedNonExistenceProof result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public ics23.CompressedNonExistenceProof buildPartial() {
      ics23.CompressedNonExistenceProof result = new ics23.CompressedNonExistenceProof(this);
      result.key_ = key_;
      if (leftBuilder_ == null) {
        result.left_ = left_;
      } else {
        result.left_ = leftBuilder_.build();
      }
      if (rightBuilder_ == null) {
        result.right_ = right_;
      } else {
        result.right_ = rightBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof ics23.CompressedNonExistenceProof) {
        return mergeFrom((ics23.CompressedNonExistenceProof)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(ics23.CompressedNonExistenceProof other) {
      if (other == ics23.CompressedNonExistenceProof.getDefaultInstance()) return this;
      if (other.getKey() != com.google.protobuf.ByteString.EMPTY) {
        setKey(other.getKey());
      }
      if (other.hasLeft()) {
        mergeLeft(other.getLeft());
      }
      if (other.hasRight()) {
        mergeRight(other.getRight());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      ics23.CompressedNonExistenceProof parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (ics23.CompressedNonExistenceProof) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.google.protobuf.ByteString key_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * TODO: remove this as unnecessary??? we prove a range
     * </pre>
     *
     * <code>bytes key = 1;</code>
     */
    public com.google.protobuf.ByteString getKey() {
      return key_;
    }
    /**
     * <pre>
     * TODO: remove this as unnecessary??? we prove a range
     * </pre>
     *
     * <code>bytes key = 1;</code>
     */
    public Builder setKey(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      key_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * TODO: remove this as unnecessary??? we prove a range
     * </pre>
     *
     * <code>bytes key = 1;</code>
     */
    public Builder clearKey() {
      
      key_ = getDefaultInstance().getKey();
      onChanged();
      return this;
    }

    private ics23.CompressedExistenceProof left_;
    private com.google.protobuf.SingleFieldBuilderV3<
        ics23.CompressedExistenceProof, ics23.CompressedExistenceProof.Builder, ics23.CompressedExistenceProofOrBuilder> leftBuilder_;
    /**
     * <code>.ics23.CompressedExistenceProof left = 2;</code>
     */
    public boolean hasLeft() {
      return leftBuilder_ != null || left_ != null;
    }
    /**
     * <code>.ics23.CompressedExistenceProof left = 2;</code>
     */
    public ics23.CompressedExistenceProof getLeft() {
      if (leftBuilder_ == null) {
        return left_ == null ? ics23.CompressedExistenceProof.getDefaultInstance() : left_;
      } else {
        return leftBuilder_.getMessage();
      }
    }
    /**
     * <code>.ics23.CompressedExistenceProof left = 2;</code>
     */
    public Builder setLeft(ics23.CompressedExistenceProof value) {
      if (leftBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        left_ = value;
        onChanged();
      } else {
        leftBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.ics23.CompressedExistenceProof left = 2;</code>
     */
    public Builder setLeft(
        ics23.CompressedExistenceProof.Builder builderForValue) {
      if (leftBuilder_ == null) {
        left_ = builderForValue.build();
        onChanged();
      } else {
        leftBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.ics23.CompressedExistenceProof left = 2;</code>
     */
    public Builder mergeLeft(ics23.CompressedExistenceProof value) {
      if (leftBuilder_ == null) {
        if (left_ != null) {
          left_ =
            ics23.CompressedExistenceProof.newBuilder(left_).mergeFrom(value).buildPartial();
        } else {
          left_ = value;
        }
        onChanged();
      } else {
        leftBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.ics23.CompressedExistenceProof left = 2;</code>
     */
    public Builder clearLeft() {
      if (leftBuilder_ == null) {
        left_ = null;
        onChanged();
      } else {
        left_ = null;
        leftBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.ics23.CompressedExistenceProof left = 2;</code>
     */
    public ics23.CompressedExistenceProof.Builder getLeftBuilder() {
      
      onChanged();
      return getLeftFieldBuilder().getBuilder();
    }
    /**
     * <code>.ics23.CompressedExistenceProof left = 2;</code>
     */
    public ics23.CompressedExistenceProofOrBuilder getLeftOrBuilder() {
      if (leftBuilder_ != null) {
        return leftBuilder_.getMessageOrBuilder();
      } else {
        return left_ == null ?
            ics23.CompressedExistenceProof.getDefaultInstance() : left_;
      }
    }
    /**
     * <code>.ics23.CompressedExistenceProof left = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ics23.CompressedExistenceProof, ics23.CompressedExistenceProof.Builder, ics23.CompressedExistenceProofOrBuilder> 
        getLeftFieldBuilder() {
      if (leftBuilder_ == null) {
        leftBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ics23.CompressedExistenceProof, ics23.CompressedExistenceProof.Builder, ics23.CompressedExistenceProofOrBuilder>(
                getLeft(),
                getParentForChildren(),
                isClean());
        left_ = null;
      }
      return leftBuilder_;
    }

    private ics23.CompressedExistenceProof right_;
    private com.google.protobuf.SingleFieldBuilderV3<
        ics23.CompressedExistenceProof, ics23.CompressedExistenceProof.Builder, ics23.CompressedExistenceProofOrBuilder> rightBuilder_;
    /**
     * <code>.ics23.CompressedExistenceProof right = 3;</code>
     */
    public boolean hasRight() {
      return rightBuilder_ != null || right_ != null;
    }
    /**
     * <code>.ics23.CompressedExistenceProof right = 3;</code>
     */
    public ics23.CompressedExistenceProof getRight() {
      if (rightBuilder_ == null) {
        return right_ == null ? ics23.CompressedExistenceProof.getDefaultInstance() : right_;
      } else {
        return rightBuilder_.getMessage();
      }
    }
    /**
     * <code>.ics23.CompressedExistenceProof right = 3;</code>
     */
    public Builder setRight(ics23.CompressedExistenceProof value) {
      if (rightBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        right_ = value;
        onChanged();
      } else {
        rightBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.ics23.CompressedExistenceProof right = 3;</code>
     */
    public Builder setRight(
        ics23.CompressedExistenceProof.Builder builderForValue) {
      if (rightBuilder_ == null) {
        right_ = builderForValue.build();
        onChanged();
      } else {
        rightBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.ics23.CompressedExistenceProof right = 3;</code>
     */
    public Builder mergeRight(ics23.CompressedExistenceProof value) {
      if (rightBuilder_ == null) {
        if (right_ != null) {
          right_ =
            ics23.CompressedExistenceProof.newBuilder(right_).mergeFrom(value).buildPartial();
        } else {
          right_ = value;
        }
        onChanged();
      } else {
        rightBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.ics23.CompressedExistenceProof right = 3;</code>
     */
    public Builder clearRight() {
      if (rightBuilder_ == null) {
        right_ = null;
        onChanged();
      } else {
        right_ = null;
        rightBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.ics23.CompressedExistenceProof right = 3;</code>
     */
    public ics23.CompressedExistenceProof.Builder getRightBuilder() {
      
      onChanged();
      return getRightFieldBuilder().getBuilder();
    }
    /**
     * <code>.ics23.CompressedExistenceProof right = 3;</code>
     */
    public ics23.CompressedExistenceProofOrBuilder getRightOrBuilder() {
      if (rightBuilder_ != null) {
        return rightBuilder_.getMessageOrBuilder();
      } else {
        return right_ == null ?
            ics23.CompressedExistenceProof.getDefaultInstance() : right_;
      }
    }
    /**
     * <code>.ics23.CompressedExistenceProof right = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        ics23.CompressedExistenceProof, ics23.CompressedExistenceProof.Builder, ics23.CompressedExistenceProofOrBuilder> 
        getRightFieldBuilder() {
      if (rightBuilder_ == null) {
        rightBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            ics23.CompressedExistenceProof, ics23.CompressedExistenceProof.Builder, ics23.CompressedExistenceProofOrBuilder>(
                getRight(),
                getParentForChildren(),
                isClean());
        right_ = null;
      }
      return rightBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:ics23.CompressedNonExistenceProof)
  }

  // @@protoc_insertion_point(class_scope:ics23.CompressedNonExistenceProof)
  private static final ics23.CompressedNonExistenceProof DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ics23.CompressedNonExistenceProof();
  }

  public static ics23.CompressedNonExistenceProof getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CompressedNonExistenceProof>
      PARSER = new com.google.protobuf.AbstractParser<CompressedNonExistenceProof>() {
    @java.lang.Override
    public CompressedNonExistenceProof parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new CompressedNonExistenceProof(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CompressedNonExistenceProof> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CompressedNonExistenceProof> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public ics23.CompressedNonExistenceProof getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

